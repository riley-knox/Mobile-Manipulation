#!/usr/bin/env python
"""
This algorithm creates the configurations of the Youbot mobile manipulator.

To execute the algorithm, run the command './mobile_manipulation' from the Terminal

To change the robot's initial configuration, adjust the values in Lines

To adjust the robot's feedback control gains, adjust the values in Lines
"""
#necessary imports
from __future__ import print_function
import csv
import logging
import math
import numpy as np
import modern_robotics as mr
import matplotlib.pyplot as mpl
from pprint import pprint

np.set_printoptions(precision = 3, suppress = True)

#robot geometry
l = 0.47/2
w = 0.3/2
r = 0.0475

#h matrix
H_pseudo_inv = np.array([[-1/(l+w), 1/(l+w), 1/(l+w), -1/(l+w)],
                         [1, 1, 1, 1],
                         [-1, 1, -1, 1]])
zero_row4 = np.array([[0, 0, 0, 0]])
F6 = (r/4)*np.vstack((zero_row4, zero_row4, H_pseudo_inv, zero_row4))
#print(F6)

#initialize error integral
err_integral = 0
#initialize configurations list for trajectory generator
configs = []
#initialize list for geometric configurations
results = []
#initialize lists to hold error values
err1 = []
err2 = []
err3 = []
err4 = []
err5 = []
err6 = []
error = []

#body-frame screw axes, arm joints
arm_screws = np.array([[0, 0, 1, 0, 0.033, 0],
                       [0, -1, 0, -0.5076, 0, 0],
                       [0, -1, 0, -0.3526, 0, 0],
                       [0, -1, 0, -0.2176, 0, 0],
                       [0, 0, 1, 0, 0, 0]]).T
#print(arm_screws)

#end effector home configuration
M_0e = np.array([[1, 0, 0, 0.033],
                 [0, 1, 0, 0],
                 [0, 0, 1, 0.6546],
                 [0, 0, 0, 1]])
#print(M_0e)

#arm base frame in chassis frame
T_b0 = np.array([[1, 0, 0, 0.1662],
                 [0, 1, 0, 0],
                 [0, 0, 1, 0.0026],
                 [0, 0, 0, 1]])
#print(T_b0)

#turn se(3) matrix into configuration vector
def CreateTrajectoryVector(config, grip_state):
    """
    config = configuration in SE(3) form
    grip_state = gripper state; open = 0, closed = 1
    """
    traj_i = []                                                             #empty list
    traj_i[0:3] = config[0, 0:3]                                            #rotational values
    traj_i[3:6] = config[1, 0:3]
    traj_i[6:9] = config[2, 0:3]
    traj_i.extend([config[0, 3], config[1, 3], config[2, 3], grip_state])   #translational values + grip state
    return traj_i

#trajectory generator function
def TrajectoryGenerator(trajectory_times, endpoints, hz):
    """
    trajectory_times = time length of each trajectory segment
    endpoints = start/end points of each trajectory segment
    hz = configurations per second
    """
    for i in range(len(trajectory_times)):      #determine type of each trajectory
        traj_start = endpoints[i]               #trajectory start
        traj_end = endpoints[i+1]               #trajectory end

        #use cartesian trajectory
        traj_i = mr.CartesianTrajectory(traj_start, traj_end, trajectory_times[i], trajectory_times[i]*hz, 5)

        if 2 <= i <= 5:                         #set grip state to closed for 'holding' trajectories
            append = 1
        else:                                   #set grip state to open for others
            append = 0

        for j in range(len(traj_i)):            #create trajectory vectors across
            t_j = CreateTrajectoryVector(traj_i[j], append)
            configs.append(t_j)

T_se = np.array([[0, 0, 1, 0],          #initial E-E configuration
                 [0, 1, 0, 0],
                 [-1, 0, 0, 0.5],
                 [0, 0, 0, 1]])

"""
Default positions
"""
T_sc_i = np.array([[1, 0, 0, 1],        #initial cube configuration
                   [0, 1, 0, 0],
                   [0, 0, 1, 0.025],
                   [0, 0, 0, 1]])

T_sc_f = np.array([[0, 1, 0, 0],        #final cube configuration
                   [-1, 0, 0, -1],
                   [0, 0, 1, 0.025],
                   [0, 0, 0, 1]])

"""
NEW TASK POSITIONS
"""

T_grasp = np.array([[0, 0, 1, 0],       #transformation from cube:E-E when grasping
                    [0, 1, 0, 0],
                    [-1, 0, 0, 0],
                    [0, 0, 0, 1]])

T_standoff = np.array([[0, 0, 1, 0],    #transformation from cube:E-E at standoff
                       [0, 1, 0, 0],
                       [-1, 0, 0, 0.05],
                       [0, 0, 0, 1]])

k = 100                                         #configurations per second
traj_times = [5, 1, 1, 1, 5, 1, 1, 1]           #trajectory segment times (seconds)

#trajectory endpoints
t1_start = T_se                                 #segment 1 start (initial config)
t1_end = np.dot(T_sc_i, T_standoff)             #segment 1 endpoint (initial standoff)
t2_end = np.dot(T_sc_i, T_grasp)                #segment 2 endpoint (grab cube position)
t3_end = t2_end                                 #segment 3 endpoint (grab cube position)
t4_end = t1_end                                 #segment 4 endpoint (initial standoff)
t5_end = np.dot(T_sc_f, T_standoff)             #segment 5 endpoint (final standoff)
t6_end = np.dot(T_sc_f, T_grasp)                #segment 6 endpoint (release cube position)
t7_end = t6_end                                 #segment 7 endpoint (release cube position)
t8_end = t5_end                                 #segment 8 endpoint (final standoff)
#create list
traj_endpoints = [t1_start, t1_end, t2_end, t3_end, t4_end, t5_end, t6_end, t7_end, t8_end]

def NextState(current_config, controls, dt, gripper):
    """
    current_config = robot geometric configuration
        Chassis angle, chassis x, chassis y, J1, J2, J3, J4, J5, W1, W2, W3, W4, Gripper
        J* = angle of joint *
        W* = angle of wheel *
        Gripper = gripper state (open/closed)
    controls = joint speeds
        Arm joint speeds (thetadot)
        Wheel speeds (u)
    dt = timestep
    max_speeds = maximum wheel/arm joint speeds
    gripper = gripper state
    """
    phi, x, y, j1, j2, j3, j4, j5, w1, w2, w3, w4, grip = current_config[0]     #extract current config

    w1d, w2d, w3d, w4d, j1d, j2d, j3d, j4d, j5d = controls                      #extract joint controls

    T_chassis = np.array([[math.cos(phi), -math.sin(phi), 0, x],                #transform to chassis frame
                          [math.sin(phi), math.cos(phi), 0, y],
                          [0, 0, 1, 0.0963],
                          [0, 0, 0, 1]])

    dtheta = np.array([[w1d],                               #change in wheel angles
                       [w2d],
                       [w3d],
                       [w4d]])*dt

    V_b = np.dot(H_pseudo_inv, dtheta)*(r/4)                #chassis body twist in plane

    V_b6 = np.array([[0, 0, V_b[0], V_b[1], V_b[2], 0]]).T  #body twist 6-vector

    T_bb = mr.MatrixExp6(mr.VecTose3(V_b6))                 #chassis displacement (chassis frame)

    T_b = np.dot(T_chassis, T_bb)                           #chassis displacement (world frame)

    #update chassis config
    phid = math.asin(T_b[1][0])                 #change in phi
    xd = T_b[0][3]                              #change in x
    yd = T_b[1][3]                              #change in y

    #update joint angles
    j1_d = j1 + j1d*dt
    j2_d = j2 + j2d*dt
    j3_d = j3 + j3d*dt
    j4_d = j4 + j4d*dt
    j5_d = j5 + j5d*dt

    #update wheel angles
    w1_d = w1 + w1d*dt
    w2_d = w2 + w2d*dt
    w3_d = w3 + w3d*dt
    w4_d = w4 + w4d*dt

    #add new configuration to list
    results.append([phid, xd, yd, j1_d, j2_d, j3_d, j4_d, j5_d, w1_d, w2_d, w3_d, w4_d, gripper])

    return phid, xd, yd, j1_d, j2_d, j3_d, j4_d, j5_d, w1_d, w2_d, w3_d, w4_d, gripper

#returns jacobians based on current configuration
def GetCurrent(phi, x, y, j1, j2, j3, j4, j5):
    """
    phi = chassis angle
    x = chassis x
    y = chassis y
    j* = angle of arm joint *
    """
    theta_list = np.array([j1, j2, j3, j4, j5])                     #list of arm joint angles

    T_chassis = np.array([[math.cos(phi), -math.sin(phi), 0, x],    #se(3) of chassis configuration
                          [math.sin(phi), math.cos(phi), 0, y],
                          [0, 0, 1, 0.0963],
                          [0, 0, 0, 1]])

    J_arm = mr.JacobianBody(arm_screws, theta_list)                     #body jacobian of arm

    T_0e = mr.FKinBody(M_0e, arm_screws, theta_list)                    #end-effector se(3) at current joint angles

    X = np.dot(np.dot(T_chassis, T_b0), T_0e)                           #current end-effector se(3) in world frame

    J_body = np.dot(mr.Adjoint(np.dot(np.linalg.inv(T_0e),T_b0)), F6)   #chassis body jacobian

    return X, J_arm, J_body

def FeedbackControl(X, X_d, X_d_next, K_p, K_i, dt, J_a, J_b):
    """
    X = current end-effector configuration in world frame
    X_d = current end-effector reference configuration
    X_d_next = next end-effector reference configuration
    K_p = proportional gain matrix
    K_i = integrative gain matrix
    dt = timestep
    J_a = arm body Jacobian
    J_b = chassis body Jacobian
    """
    global err_integral

    V_d = mr.se3ToVec(mr.MatrixLog6(np.dot(np.linalg.inv(X_d), X_d_next))/dt)   #feedforward twist Vd

    first_term = np.dot(mr.Adjoint(np.dot(np.linalg.inv(X), X_d)),V_d)          #control integral first term

    X_err = mr.se3ToVec(mr.MatrixLog6(np.dot(np.linalg.inv(X), X_d)))           #error twist

    second_term = np.dot(K_p, X_err)                                            #control integral second term

    err_integral += X_err*dt                                                    #update error integral

    third_term = np.dot(K_i, err_integral)                                      #control integral third term

    V_t = first_term + second_term + third_term                                 #end-effector twist V(t)

    J_e = np.hstack((J_b, J_a))                                                 #combined jacobian

    V = np.dot(np.linalg.pinv(J_e, 1e-2), V_t)                                  #joint command velocities

    return V, X_err

#function returns an se(3) matrix from the
def CreateSE3(vector):
    out = np.array([[vector[0], vector[1], vector[2], vector[9]],
                    [vector[3], vector[4], vector[5], vector[10]],
                    [vector[6], vector[7], vector[8], vector[11]],
                    [0, 0, 0, 1]])

    return out

def main():
    logging.basicConfig(filename="manipulation.log", filemode="w", level=logging.DEBUG, format="%(name)s - %(levelname)s - %(message)s")

    logging.info("Generating animation .csv file...")

    #generate reference trajectory
    logging.info("Generating reference trajectory...")
    TrajectoryGenerator(traj_times, traj_endpoints, k)
    logging.info("Reference trajectory complete.")

    logging.info("Cube initial position = \n{}".format(T_sc_i))
    logging.info("Cube goal position = \n{}".format(T_sc_f))

    #initial geometric parameters
    dt = 0.01                                                                   #timestep
    phi = -math.pi/5                                                            #chassis angle
    x = -0.385                                                                  #chassis x
    y = -0.385                                                                  #chassis y
    w1 = w2 = w3 = w4 = 0                                                       #wheel angles
    j1 = j2 = j5 = 0                                                            #arm joints 1, 2, 5 angles
    j3 = -1.0                                                                   #arm joint 3 angle
    j4 = -1.6                                                                   #arm joint 4 angle

    #control matrices
    K_p = 12*np.identity(6)
    K_i = 1.2*np.identity(6)

    #initial geometric configuration
    config_init = np.array([[phi, x, y, j1, j2, j3, j4, j5, w1, w2, w3, w4, 0]])
    results.append(config_init[0])

    logging.info("Robot initial configuration phi, x, y, j1, j2, j3, j4, j5, w1, w2, w3, w4 = \n{}".format(config_init[0]))

    logging.info("Proportional gain K_p = \n{}".format(K_p))
    logging.info("Integral gain K_i = \n{}".format(K_i))

    logging.info("Starting loop now.")

    #loop through reference trajectory to determine configurations and joint controls
    for i in range(len(configs)-1):
        #current configuration + jacobians
        X, J_arm, J_base = GetCurrent(phi, x, y, j1, j2, j3, j4, j5)

        #current reference se(3)
        X_d = CreateSE3(configs[i])

        #next reference se(3)
        X_d_next = CreateSE3(configs[i+1])

        #control velocities + error twist
        V, X_err = FeedbackControl(X, X_d, X_d_next, K_p, K_i, dt, J_arm, J_base)

        #controls vector for nextstate function
        v_arms = V[-5:]                                                         #arm joint velocities
        v_wheels = V[:4]                                                        #wheel velocities
        controls = np.array(np.hstack((v_wheels, v_arms)))

        #gripper state
        g = configs[i][-1]

        #get next configuration
        phi, x, y, j1, j2, j3, j4, j5, w1, w2, w3, w4, g = NextState(np.array([results[-1]]), controls, dt, g)

        #fill error lists
        err1.append(X_err[0])
        err2.append(X_err[1])
        err3.append(X_err[2])
        err4.append(X_err[3])
        err5.append(X_err[4])
        err6.append(X_err[5])
        error.append([X_err[0], X_err[1], X_err[2], X_err[3], X_err[4], X_err[5]])

    logging.info("Animation .csv file complete.")

    logging.info("Creating error plots...")

    time = np.arange(0, 15.99, 0.01)                       #time vector for error plots

    mpl.plot(time, err1, label='omega_x')
    mpl.plot(time, err2, label='omega_y')
    mpl.plot(time, err3, label='omega_z')
    mpl.plot(time, err4, label='v_x')
    mpl.plot(time, err5, label='v_y')
    mpl.plot(time, err6, label='v_z')
    mpl.title('Error Plot: Kp = {}, Ki = {}'.format(K_p[0, 0], K_i[0, 0]))
    mpl.xlabel('Time (s)')
    mpl.grid()
    mpl.legend(bbox_to_anchor=(1,0.5))

    logging.info("Error plots complete.")
    mpl.show()

    with open('trajectory2.csv', mode='w+') as config_file:
        config_writer = csv.writer(config_file, delimiter=',')
        config_writer.writerows(configs)

    with open('manipulation.csv', mode='w+') as config_file:
        config_writer = csv.writer(config_file, delimiter=',')
        config_writer.writerows(results)

    with open('error.csv', mode='w+') as config_file:
        config_writer = csv.writer(config_file, delimiter=',')
        config_writer.writerows(error)

if __name__ == '__main__':
    main()
